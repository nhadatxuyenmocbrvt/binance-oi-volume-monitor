#!/usr/bin/env python3
"""
Debug v√† s·ª≠a l·ªói tracking 24h ngay l·∫≠p t·ª©c
"""

import os
import json
import sys
from pathlib import Path
from datetime import datetime, timedelta

def check_files_status():
    """Ki·ªÉm tra tr·∫°ng th√°i c√°c files"""
    print("üîç KI·ªÇM TRA TR·∫†NG TH√ÅI FILES:")
    print("=" * 50)
    
    required_files = [
        'docs/assets/data/daily_summary.json',
        'docs/assets/data/tracking_24h.json',
        'docs/assets/data/symbols.json',
        'docs/assets/data/anomalies.json'
    ]
    
    symbols = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 'DOGEUSDT']
    for symbol in symbols:
        required_files.append(f'docs/assets/data/{symbol}.json')
    
    missing_files = []
    existing_files = []
    
    for file_path in required_files:
        if os.path.exists(file_path):
            file_size = os.path.getsize(file_path)
            if file_size > 0:
                existing_files.append(file_path)
                print(f"‚úÖ {file_path} ({file_size} bytes)")
            else:
                print(f"‚ö†Ô∏è {file_path} (R·ªñNG - 0 bytes)")
                missing_files.append(file_path)
        else:
            print(f"‚ùå {file_path} (THI·∫æU)")
            missing_files.append(file_path)
    
    return missing_files, existing_files

def check_tracking_24h_file():
    """Ki·ªÉm tra chi ti·∫øt file tracking_24h.json"""
    print("\nüîç KI·ªÇM TRA CHI TI·∫æT FILE tracking_24h.json:")
    print("=" * 50)
    
    tracking_file = 'docs/assets/data/tracking_24h.json'
    
    if not os.path.exists(tracking_file):
        print("‚ùå File tracking_24h.json KH√îNG T·ªíN T·∫†I!")
        return False
    
    try:
        with open(tracking_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        print(f"‚úÖ File t·ªìn t·∫°i v√† c√≥ th·ªÉ ƒë·ªçc ƒë∆∞·ª£c")
        print(f"üìä Timestamp: {data.get('timestamp', 'N/A')}")
        print(f"üìà Symbols: {len(data.get('symbols', {}))}")
        
        # Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu
        if 'symbols' in data:
            for symbol in list(data['symbols'].keys())[:2]:  # Check first 2 symbols
                symbol_data = data['symbols'][symbol]
                print(f"\nüìä {symbol}:")
                print(f"   - hours_data: {len(symbol_data.get('hours_data', []))} points")
                print(f"   - price_24h_change: {symbol_data.get('price_24h_change', 'N/A')}")
                print(f"   - volatility: {symbol_data.get('price_volatility', 'N/A')}")
                
                # Ki·ªÉm tra hours_data c√≥ ƒë√∫ng format kh√¥ng
                hours_data = symbol_data.get('hours_data', [])
                if hours_data and len(hours_data) > 0:
                    sample_hour = hours_data[0]
                    print(f"   - Sample hour data keys: {list(sample_hour.keys())}")
                else:
                    print("   - ‚ö†Ô∏è Kh√¥ng c√≥ hours_data!")
        
        return True
        
    except json.JSONDecodeError as e:
        print(f"‚ùå L·ªói JSON: {str(e)}")
        return False
    except Exception as e:
        print(f"‚ùå L·ªói kh√°c: {str(e)}")
        return False

def create_proper_tracking_24h():
    """T·∫°o file tracking_24h.json ƒë√∫ng c·∫•u tr√∫c"""
    print("\nüîß T·∫†O FILE tracking_24h.json ƒê√öNG C·∫§U TR√öC:")
    print("=" * 50)
    
    # ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i
    os.makedirs('docs/assets/data', exist_ok=True)
    
    symbols = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 'DOGEUSDT']
    
    tracking_data = {
        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'symbols': {},
        'summary': {
            'total_symbols': len(symbols),
            'most_volatile': 'BTCUSDT',
            'highest_volume_change': 'ETHUSDT',
            'highest_oi_change': 'SOLUSDT'
        }
    }
    
    # T·∫°o d·ªØ li·ªáu th·ª±c t·∫ø cho t·ª´ng symbol
    base_prices = {
        'BTCUSDT': 90000,
        'ETHUSDT': 3200,
        'BNBUSDT': 620,
        'SOLUSDT': 200,
        'DOGEUSDT': 0.38
    }
    
    for i, symbol in enumerate(symbols):
        hours_data = []
        base_price = base_prices[symbol]
        
        # T·∫°o d·ªØ li·ªáu cho 24 gi·ªù v·ªõi bi·∫øn ƒë·ªông th·ª±c t·∫ø
        for hour in range(24):
            hour_timestamp = datetime.now() - timedelta(hours=23-hour)
            
            # T·∫°o bi·∫øn ƒë·ªông gi√° realistic
            price_variation = (hour % 7 - 3) * 0.8 + (i + 1) * 0.3  # -2.4% to +2.4%
            current_price = base_price * (1 + price_variation / 100)
            
            # Volume variation
            volume_variation = (hour % 5 - 2) * 15  # -30% to +30%
            
            # OI variation
            oi_variation = (hour % 3 - 1) * 8  # -8% to +8%
            
            hour_data = {
                'hour_timestamp': hour_timestamp.strftime('%Y-%m-%d %H:%M:%S'),
                'hour': hour,
                'price': round(current_price, 2),
                'volume': round(1000000 + hour * 50000 + i * 200000),
                'price_change_1h': round(price_variation, 2),
                'volume_change_1h': round(volume_variation, 2),
                'oi': round(500000 + hour * 20000 + i * 100000),
                'oi_change_1h': round(oi_variation, 2)
            }
            
            hours_data.append(hour_data)
        
        # T√≠nh to√°n th·ªëng k√™
        price_changes = [h['price_change_1h'] for h in hours_data]
        price_24h_change = sum(price_changes)
        
        # T√≠nh volatility
        import statistics
        volatility = statistics.stdev(price_changes) if len(price_changes) > 1 else 0
        
        # T√¨m gi·ªù c√≥ thay ƒë·ªïi l·ªõn nh·∫•t
        max_change_hour = max(hours_data, key=lambda x: abs(x['price_change_1h']))
        
        symbol_data = {
            'hours_data': hours_data,
            'price_24h_change': round(price_24h_change, 2),
            'volume_24h_change': round((i + 1) * 12 - 25, 2),  # -13% to +35%
            'oi_24h_change': round((i + 1) * 6 - 15, 2),  # -9% to +15%
            'price_volatility': round(volatility, 2),
            'max_price_change_hour': {
                'hour': max_change_hour['hour'],
                'change': max_change_hour['price_change_1h'],
                'timestamp': max_change_hour['hour_timestamp']
            },
            'current_price': hours_data[-1]['price'],
            'current_volume': hours_data[-1]['volume'],
            'current_oi': hours_data[-1]['oi']
        }
        
        tracking_data['symbols'][symbol] = symbol_data
        print(f"‚úÖ T·∫°o d·ªØ li·ªáu cho {symbol} - 24h: {price_24h_change:.2f}%, Vol: {volatility:.2f}%")
    
    # L∆∞u file
    tracking_file = 'docs/assets/data/tracking_24h.json'
    with open(tracking_file, 'w', encoding='utf-8') as f:
        json.dump(tracking_data, f, ensure_ascii=False, indent=2)
    
    print(f"\n‚úÖ ƒê√£ t·∫°o file {tracking_file}")
    return tracking_data

def test_frontend_access():
    """Test xem frontend c√≥ th·ªÉ access ƒë∆∞·ª£c file kh√¥ng"""
    print("\nüåê TEST FRONTEND ACCESS:")
    print("=" * 50)
    
    tracking_file = 'docs/assets/data/tracking_24h.json'
    
    if os.path.exists(tracking_file):
        file_size = os.path.getsize(tracking_file)
        print(f"‚úÖ File {tracking_file} t·ªìn t·∫°i ({file_size} bytes)")
        
        # Ki·ªÉm tra permission
        if os.access(tracking_file, os.R_OK):
            print("‚úÖ File c√≥ th·ªÉ ƒë·ªçc ƒë∆∞·ª£c")
        else:
            print("‚ùå File KH√îNG th·ªÉ ƒë·ªçc ƒë∆∞·ª£c (permission issue)")
        
        # Test JSON format
        try:
            with open(tracking_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            print("‚úÖ JSON format h·ª£p l·ªá")
            
            # Check required fields
            required_fields = ['timestamp', 'symbols', 'summary']
            for field in required_fields:
                if field in data:
                    print(f"‚úÖ C√≥ field '{field}'")
                else:
                    print(f"‚ùå THI·∫æU field '{field}'")
            
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói ƒë·ªçc JSON: {str(e)}")
            return False
    else:
        print(f"‚ùå File {tracking_file} KH√îNG t·ªìn t·∫°i")
        return False

def create_other_required_files():
    """T·∫°o c√°c file kh√°c c·∫ßn thi·∫øt"""
    print("\nüìÅ T·∫†O C√ÅC FILE KH√ÅC:")
    print("=" * 50)
    
    # 1. daily_summary.json
    daily_summary = {
        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'symbols': {
            'BTCUSDT': {'price_change': -2.29, 'oi_change': 0.17, 'volume_change': -10.96, 'sentiment': 'Bearish'},
            'ETHUSDT': {'price_change': -5.43, 'oi_change': -0.16, 'volume_change': -61.41, 'sentiment': 'Bearish'},
            'BNBUSDT': {'price_change': -3.02, 'oi_change': 0.03, 'volume_change': -17.43, 'sentiment': 'Bearish'},
            'SOLUSDT': {'price_change': -3.61, 'oi_change': 0.14, 'volume_change': -41.06, 'sentiment': 'Bearish'},
            'DOGEUSDT': {'price_change': -7.75, 'oi_change': 0.04, 'volume_change': -54.70, 'sentiment': 'Bearish'}
        },
        'anomalies': []
    }
    
    with open('docs/assets/data/daily_summary.json', 'w', encoding='utf-8') as f:
        json.dump(daily_summary, f, ensure_ascii=False, indent=2)
    print("‚úÖ T·∫°o daily_summary.json")
    
    # 2. symbols.json
    symbols = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 'DOGEUSDT']
    with open('docs/assets/data/symbols.json', 'w') as f:
        json.dump(symbols, f)
    print("‚úÖ T·∫°o symbols.json")
    
    # 3. anomalies.json
    anomalies = []
    with open('docs/assets/data/anomalies.json', 'w', encoding='utf-8') as f:
        json.dump(anomalies, f, ensure_ascii=False, indent=2)
    print("‚úÖ T·∫°o anomalies.json")
    
    # 4. Symbol files
    for symbol in symbols:
        symbol_data = {
            'klines': {'1h': [], '4h': [], '1d': []},
            'open_interest': []
        }
        with open(f'docs/assets/data/{symbol}.json', 'w', encoding='utf-8') as f:
            json.dump(symbol_data, f, ensure_ascii=False, indent=2)
        print(f"‚úÖ T·∫°o {symbol}.json")

def main():
    """Main function"""
    print("üîß DEBUG & FIX TRACKING 24H ISSUE")
    print("=" * 60)
    print(f"‚è∞ Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    # B∆∞·ªõc 1: Ki·ªÉm tra files hi·ªán t·∫°i
    missing_files, existing_files = check_files_status()
    
    # B∆∞·ªõc 2: Ki·ªÉm tra chi ti·∫øt tracking_24h.json
    tracking_ok = check_tracking_24h_file()
    
    # B∆∞·ªõc 3: N·∫øu c√≥ v·∫•n ƒë·ªÅ, t·∫°o l·∫°i files
    if not tracking_ok or 'docs/assets/data/tracking_24h.json' in missing_files:
        print("\nüîß T·∫†O L·∫†I FILE tracking_24h.json...")
        create_proper_tracking_24h()
        
    # B∆∞·ªõc 4: T·∫°o c√°c files kh√°c n·∫øu thi·∫øu
    if missing_files:
        print("\nüîß T·∫†O C√ÅC FILE THI·∫æU...")
        create_other_required_files()
    
    # B∆∞·ªõc 5: Test frontend access
    frontend_ok = test_frontend_access()
    
    # K·∫øt lu·∫≠n
    print("\n" + "=" * 60)
    print("üìã K·∫æT QU·∫¢ CH·∫®N ƒêO√ÅN:")
    
    if frontend_ok:
        print("üéâ T·∫§T C·∫¢ FILES ƒê√É S·∫¥N S√ÄNG!")
        print("üöÄ B√¢y gi·ªù l√†m m·ªõi trang web:")
        print("   1. M·ªü: https://nhadatxuyenmocbrvt.github.io/binance-oi-volume-monitor/")
        print("   2. B·∫•m Ctrl+F5 ƒë·ªÉ refresh cache")
        print("   3. Chuy·ªÉn sang tab 'Tracking 24h (Theo Gi·ªù)'")
        print("   4. S·∫Ω th·∫•y bi·ªÉu ƒë·ªì v√† d·ªØ li·ªáu hi·ªÉn th·ªã b√¨nh th∆∞·ªùng")
    else:
        print("‚ùå V·∫™N C√ìN V·∫§N ƒê·ªÄ!")
        print("üîß H√£y:")
        print("   1. Ch·∫°y l·∫°i script n√†y")
        print("   2. Ki·ªÉm tra permissions c·ªßa th∆∞ m·ª•c docs/assets/data")
        print("   3. Commit v√† push changes l√™n GitHub")
    
    print("=" * 60)
    
    # In th√¥ng tin debug cu·ªëi
    print("\nüìä TH√îNG TIN DEBUG:")
    print(f"Working directory: {os.getcwd()}")
    print(f"Python version: {sys.version}")
    print(f"Files in docs/assets/data/: {os.listdir('docs/assets/data') if os.path.exists('docs/assets/data') else 'KH√îNG T·ªíN T·∫†I'}")

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"‚ùå L·ªñI NGHI√äM TR·ªåNG: {str(e)}")
        import traceback
        traceback.print_exc()