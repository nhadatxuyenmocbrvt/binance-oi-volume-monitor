/**
 * H·ªá Th·ªëng Theo D√µi OI & Volume Binance - Phi√™n B·∫£n C·∫£i Ti·∫øn V2
 * T√°c gi·∫£: AI Assistant
 * M√¥ t·∫£: H·ªá th·ªëng theo d√µi v·ªõi error handling, performance optimization v√† UX t·ªët h∆°n
 */

class HeThongTheoDoi_Binance_VietNam_V2 {
    constructor() {
        // C·∫•u h√¨nh c∆° b·∫£n
        this.khungThoiGianHienTai = '1h';
        this.giaiDoanHienTai = '7d';
        this.cacBieuDo = new Map(); // S·ª≠ d·ª•ng Map thay v√¨ object
        this.danhSachCoin = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 'DOGEUSDT'];
        
        // Kho l∆∞u tr·ªØ d·ªØ li·ªáu
        this.khoLuuTru = {
            thoiGianThuc: null,
            lichSu: new Map(),
            batThuong: null,
            capNhatLanCuoi: null,
            hourly24h: null,
            trangThaiKetNoi: 'disconnected'
        };
        
        // C·∫•u h√¨nh error handling
        this.soLanThayLoi = 0;
        this.maxRetries = 3;
        this.retryDelay = 1000; // 1 gi√¢y
        
        // C·∫•u h√¨nh performance
        this.debounceTimers = new Map();
        this.requestQueue = [];
        this.isProcessingQueue = false;
        
        // C·∫•u h√¨nh UI
        this.toastContainer = null;
        this.loadingOverlay = null;
        
        // Kh·ªüi t·∫°o h·ªá th·ªëng
        this.khoiTao();
    }

    // ================================
    // KH·ªûI T·∫†O V√Ä SETUP
    // ================================

    async khoiTao() {
        try {
            console.log('üöÄ Kh·ªüi t·∫°o h·ªá th·ªëng theo d√µi Binance V2...');
            
            // Thi·∫øt l·∫≠p UI components
            this.thietLapUIComponents();
            
            // Hi·ªÉn th·ªã tr·∫°ng th√°i k·∫øt n·ªëi
            this.hienThiTrangThaiKetNoi('connecting');
            
            // G·∫Øn s·ª± ki·ªán
            this.ganCacSuKien();
            
            // T·∫£i d·ªØ li·ªáu ban ƒë·∫ßu
            await this.taiDuLieuBanDau();
            
            // Thi·∫øt l·∫≠p auto-refresh
            this.thietLapTuDongLamMoi();
            
            // Thi·∫øt l·∫≠p WebSocket (future feature)
            this.thietLapWebSocket();
            
            // Hi·ªÉn th·ªã tr·∫°ng th√°i k·∫øt n·ªëi th√†nh c√¥ng
            this.hienThiTrangThaiKetNoi('connected');
            
            console.log('‚úÖ H·ªá th·ªëng ƒë√£ kh·ªüi t·∫°o th√†nh c√¥ng');
            
        } catch (error) {
            console.error('‚ùå L·ªói kh·ªüi t·∫°o h·ªá th·ªëng:', error);
            this.hienThiTrangThaiKetNoi('error');
            this.hienThiThongBaoLoi('Kh√¥ng th·ªÉ kh·ªüi t·∫°o h·ªá th·ªëng. ƒêang th·ª≠ l·∫°i...');
            
            // Retry sau 5 gi√¢y
            setTimeout(() => this.khoiTao(), 5000);
        }
    }

    thietLapUIComponents() {
        // T·∫°o toast container
        this.taoToastContainer();
        
        // T·∫°o loading overlay
        this.taoLoadingOverlay();
        
        // T·∫°o connection status
        this.taoConnectionStatus();
        
        // Th√™m CSS c·∫ßn thi·∫øt
        this.themCSSBoSung();
    }

    // ================================
    // UI COMPONENTS
    // ================================

    taoToastContainer() {
        if (document.getElementById('toastContainer')) return;
        
        const container = document.createElement('div');
        container.id = 'toastContainer';
        container.className = 'toast-container position-fixed bottom-0 end-0 p-3';
        container.style.zIndex = '9999';
        document.body.appendChild(container);
        this.toastContainer = container;
    }

    taoLoadingOverlay() {
        if (document.getElementById('globalLoadingOverlay')) return;
        
        const overlay = document.createElement('div');
        overlay.id = 'globalLoadingOverlay';
        overlay.className = 'global-loading-overlay';
        overlay.innerHTML = `
            <div class="loading-content">
                <div class="spinner-border text-primary mb-3" style="width: 3rem; height: 3rem;"></div>
                <h5 class="text-white">ƒêang t·∫£i d·ªØ li·ªáu 24H...</h5>
                <p class="text-muted">Vui l√≤ng ch·ªù trong gi√¢y l√°t</p>
                <div class="progress" style="width: 300px;">
                    <div class="progress-bar progress-bar-striped progress-bar-animated" 
                         role="progressbar" style="width: 0%" id="loadingProgress"></div>
                </div>
            </div>
        `;
        document.body.appendChild(overlay);
        this.loadingOverlay = overlay;
    }

    taoConnectionStatus() {
        if (document.getElementById('connectionStatus')) return;
        
        const status = document.createElement('div');
        status.id = 'connectionStatus';
        status.className = 'connection-status';
        document.body.appendChild(status);
    }

    themCSSBoSung() {
        if (document.getElementById('enhanced-styles')) return;
        
        const style = document.createElement('style');
        style.id = 'enhanced-styles';
        style.textContent = `
            .connection-status {
                position: fixed;
                top: 10px;
                right: 10px;
                padding: 8px 12px;
                border-radius: 20px;
                font-size: 0.8rem;
                font-weight: 500;
                z-index: 1000;
                transition: all 0.3s ease;
                box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            }
            
            .status-connecting {
                background: linear-gradient(135deg, #ffc107, #fd7e14);
                color: white;
                animation: pulse 2s infinite;
            }
            
            .status-connected {
                background: linear-gradient(135deg, #28a745, #20c997);
                color: white;
            }
            
            .status-error {
                background: linear-gradient(135deg, #dc3545, #fd7e14);
                color: white;
                animation: shake 0.5s ease-in-out;
            }
            
            .global-loading-overlay {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.8);
                display: none;
                justify-content: center;
                align-items: center;
                z-index: 9999;
                backdrop-filter: blur(5px);
            }
            
            .loading-content {
                text-align: center;
                color: white;
                padding: 2rem;
                border-radius: 10px;
                background: rgba(255, 255, 255, 0.1);
            }
            
            @keyframes pulse {
                0%, 100% { opacity: 1; }
                50% { opacity: 0.7; }
            }
            
            @keyframes shake {
                0%, 100% { transform: translateX(0); }
                25% { transform: translateX(-5px); }
                75% { transform: translateX(5px); }
            }
            
            .mini-chart-container {
                width: 120px;
                height: 50px;
                position: relative;
                margin: 0 auto;
                background: rgba(247, 147, 30, 0.05);
                border-radius: 8px;
                padding: 5px;
                border: 1px solid rgba(247, 147, 30, 0.1);
                transition: all 0.3s ease;
            }
            
            .mini-chart-container:hover {
                transform: scale(1.05);
                box-shadow: 0 4px 12px rgba(247, 147, 30, 0.2);
            }
            
            .chart-cell {
                width: 140px;
                text-align: center;
                padding: 8px 5px !important;
            }
            
            .symbol-row {
                transition: all 0.3s ease;
            }
            
            .symbol-row:hover {
                background-color: rgba(247, 147, 30, 0.03) !important;
                transform: translateY(-1px);
                box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            }
            
            .error-message {
                background: linear-gradient(135deg, #f8d7da, #f5c6cb);
                border: 1px solid #f1aeb5;
                color: #721c24;
                padding: 1rem;
                border-radius: 8px;
                margin: 1rem 0;
                text-align: center;
            }
            
            .retry-button {
                background: linear-gradient(135deg, #17a2b8, #138496);
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 20px;
                font-size: 0.9rem;
                cursor: pointer;
                transition: all 0.3s ease;
            }
            
            .retry-button:hover {
                transform: translateY(-1px);
                box-shadow: 0 4px 8px rgba(23, 162, 184, 0.3);
            }
        `;
        document.head.appendChild(style);
    }

    // ================================
    // TR·∫†NG TH√ÅI V√Ä TH√îNG B√ÅO
    // ================================

    hienThiTrangThaiKetNoi(trangThai) {
        const statusElement = document.getElementById('connectionStatus');
        if (!statusElement) return;

        const trangThaiMap = {
            'connecting': { 
                text: 'ƒêang k·∫øt n·ªëi...', 
                class: 'status-connecting', 
                icon: 'arrow-clockwise',
                spin: true
            },
            'connected': { 
                text: 'ƒê√£ k·∫øt n·ªëi', 
                class: 'status-connected', 
                icon: 'wifi',
                spin: false
            },
            'error': { 
                text: 'L·ªói k·∫øt n·ªëi', 
                class: 'status-error', 
                icon: 'wifi-off',
                spin: false
            },
            'disconnected': { 
                text: 'M·∫•t k·∫øt n·ªëi', 
                class: 'status-disconnected', 
                icon: 'exclamation-triangle',
                spin: false
            }
        };

        const status = trangThaiMap[trangThai] || trangThaiMap['disconnected'];
        const iconClass = status.spin ? `bi-${status.icon} spin` : `bi-${status.icon}`;
        
        statusElement.innerHTML = `
            <i class="bi ${iconClass}"></i>
            <span>${status.text}</span>
        `;
        statusElement.className = `connection-status ${status.class}`;
        
        this.khoLuuTru.trangThaiKetNoi = trangThai;
    }

    hienThiThongBaoLoi(thongDiep, loai = 'error', tuDongDong = true) {
        const toastElement = document.createElement('div');
        toastElement.className = `toast align-items-center text-white bg-${loai === 'error' ? 'danger' : 'warning'} border-0`;
        toastElement.setAttribute('role', 'alert');
        toastElement.innerHTML = `
            <div class="d-flex">
                <div class="toast-body">
                    <i class="bi bi-${loai === 'error' ? 'exclamation-triangle' : 'info-circle'} me-2"></i>
                    ${thongDiep}
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>
        `;

        this.toastContainer.appendChild(toastElement);
        
        // S·ª≠ d·ª•ng Bootstrap Toast
        const toast = new bootstrap.Toast(toastElement, { 
            delay: tuDongDong ? 5000 : 0,
            autohide: tuDongDong
        });
        toast.show();

        // X√≥a element sau khi ·∫©n
        toastElement.addEventListener('hidden.bs.toast', () => {
            toastElement.remove();
        });

        return toast;
    }

    hienThiThongBaoThanhCong(thongDiep) {
        this.hienThiThongBaoLoi(thongDiep, 'success', true);
    }

    // ================================
    // FETCH V·ªöI ERROR HANDLING
    // ================================

    async fetchVoiRetry(url, options = {}) {
        let lastError;
        
        for (let attempt = 1; attempt <= this.maxRetries; attempt++) {
            try {
                // Th√™m timeout controller
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), 15000); // 15s timeout

                const response = await fetch(url + '?' + Date.now(), {
                    ...options,
                    signal: controller.signal,
                    headers: {
                        'Cache-Control': 'no-cache',
                        'Pragma': 'no-cache',
                        ...options.headers
                    }
                });

                clearTimeout(timeoutId);

                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }

                // Ki·ªÉm tra content type
                const contentType = response.headers.get('content-type');
                if (!contentType || !contentType.includes('application/json')) {
                    throw new Error('Response kh√¥ng ph·∫£i JSON');
                }

                const data = await response.json();
                
                // Validate d·ªØ li·ªáu c∆° b·∫£n
                if (!this.validateData(data, url)) {
                    throw new Error('D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá');
                }

                return { data, response };

            } catch (error) {
                lastError = error;
                console.warn(`L·∫ßn th·ª≠ ${attempt}/${this.maxRetries} th·∫•t b·∫°i cho ${url}:`, error.message);
                
                if (attempt < this.maxRetries) {
                    // Exponential backoff
                    const delay = this.retryDelay * Math.pow(2, attempt - 1);
                    await new Promise(resolve => setTimeout(resolve, delay));
                }
            }
        }
        
        throw lastError;
    }

    validateData(data, url) {
        // Validate c∆° b·∫£n d·ª±a tr√™n URL
        if (url.includes('daily_summary.json')) {
            return data && data.symbols && typeof data.symbols === 'object';
        }
        
        if (url.includes('hourly_24h_summary.json')) {
            return data && data.summary_type === '24h_hourly';
        }
        
        if (url.includes('.json') && !url.includes('summary')) {
            return data && (data.klines || data.open_interest);
        }
        
        return true; // Default validation
    }

    // ================================
    // T·ªêI ∆ØU LOADING V√Ä PROGRESS
    // ================================

    hienThiDangTaiToanCuc(showProgress = true) {
        if (this.loadingOverlay) {
            this.loadingOverlay.style.display = 'flex';
            
            if (showProgress) {
                this.capNhatProgress(0);
            }
        }
    }

    anDangTaiToanCuc() {
        if (this.loadingOverlay) {
            this.loadingOverlay.style.display = 'none';
        }
    }

    capNhatProgress(percentage) {
        const progressBar = document.getElementById('loadingProgress');
        if (progressBar) {
            progressBar.style.width = `${Math.min(100, Math.max(0, percentage))}%`;
        }
    }

    // ================================
    // T·∫¢I D·ªÆ LI·ªÜU V·ªöI PROGRESS TRACKING
    // ================================

    async taiDuLieuBanDau() {
        try {
            this.hienThiDangTaiToanCuc(true);
            
            const tasks = [
                { name: 'D·ªØ li·ªáu th·ªùi gian th·ª±c', fn: () => this.taiDuLieuThoiGianThuc() },
                { name: 'D·ªØ li·ªáu 24h theo gi·ªù', fn: () => this.taiDuLieu24hTheoGio() },
                { name: 'D·ªØ li·ªáu c√°c coin', fn: () => this.taiDuLieuCacCoin() },
                { name: 'D·ªØ li·ªáu b·∫•t th∆∞·ªùng', fn: () => this.taiDuLieuBatThuong() }
            ];

            const results = [];
            
            for (let i = 0; i < tasks.length; i++) {
                const task = tasks[i];
                try {
                    console.log(`üì° ƒêang t·∫£i: ${task.name}...`);
                    const result = await task.fn();
                    results.push({ success: true, data: result, name: task.name });
                    
                    // C·∫≠p nh·∫≠t progress
                    this.capNhatProgress(((i + 1) / tasks.length) * 100);
                    
                } catch (error) {
                    console.error(`‚ùå L·ªói t·∫£i ${task.name}:`, error);
                    results.push({ success: false, error, name: task.name });
                }
            }

            // ƒê√°nh gi√° k·∫øt qu·∫£
            const successCount = results.filter(r => r.success).length;
            const failCount = results.length - successCount;

            if (successCount === 0) {
                throw new Error('Kh√¥ng th·ªÉ t·∫£i b·∫•t k·ª≥ d·ªØ li·ªáu n√†o');
            }

            if (failCount > 0) {
                this.hienThiThongBaoLoi(
                    `ƒê√£ t·∫£i ${successCount}/${results.length} ngu·ªìn d·ªØ li·ªáu. ${failCount} ngu·ªìn th·∫•t b·∫°i.`,
                    'warning'
                );
            } else {
                this.hienThiThongBaoThanhCong('ƒê√£ t·∫£i t·∫•t c·∫£ d·ªØ li·ªáu th√†nh c√¥ng!');
            }
            
            this.anDangTaiToanCuc();
            await this.capNhatTatCaGiaoDien();
            
        } catch (error) {
            console.error('‚ùå L·ªói nghi√™m tr·ªçng khi t·∫£i d·ªØ li·ªáu:', error);
            this.anDangTaiToanCuc();
            this.hienThiLoi(error.message);
        }
    }

    async taiDuLieuThoiGianThuc() {
        try {
            const { data } = await this.fetchVoiRetry('assets/data/daily_summary.json');
            
            this.khoLuuTru.thoiGianThuc = data;
            this.khoLuuTru.capNhatLanCuoi = new Date();
            this.hienThiTrangThaiKetNoi('connected');
            
            return data;
        } catch (error) {
            this.hienThiTrangThaiKetNoi('error');
            
            // Fallback to cache n·∫øu c√≥
            if (this.khoLuuTru.thoiGianThuc) {
                console.warn('S·ª≠ d·ª•ng d·ªØ li·ªáu cache cho th·ªùi gian th·ª±c');
                return this.khoLuuTru.thoiGianThuc;
            }
            
            throw new Error(`Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu th·ªùi gian th·ª±c: ${error.message}`);
        }
    }

    async taiDuLieu24hTheoGio() {
        try {
            const { data } = await this.fetchVoiRetry('assets/data/hourly_24h_summary.json');
            
            this.khoLuuTru.hourly24h = data;
            
            // Hi·ªÉn th·ªã section 24h n·∫øu c√≥ d·ªØ li·ªáu
            const hourlyOverview = document.getElementById('hourlyOverview');
            if (hourlyOverview && data) {
                hourlyOverview.style.display = 'block';
                this.capNhatTongQuan24h(data);
            }
            
            console.log('‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu 24h theo gi·ªù');
            return data;
        } catch (error) {
            console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu 24h theo gi·ªù:', error.message);
            return null;
        }
    }

    async taiDuLieuCacCoin() {
        const results = await Promise.allSettled(
            this.danhSachCoin.map(async coin => {
                try {
                    const { data } = await this.fetchVoiRetry(`assets/data/${coin}.json`);
                    this.khoLuuTru.lichSu.set(coin, data);
                    return { coin, data };
                } catch (error) {
                    console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ${coin}:`, error.message);
                    return null;
                }
            })
        );

        const successCount = results.filter(r => r.status === 'fulfilled' && r.value).length;
        console.log(`‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu cho ${successCount}/${this.danhSachCoin.length} coins`);
        
        return results;
    }

    async taiDuLieuBatThuong() {
        try {
            // ∆Øu ti√™n l·∫•y t·ª´ daily_summary
            if (this.khoLuuTru.thoiGianThuc?.anomalies) {
                this.khoLuuTru.batThuong = this.khoLuuTru.thoiGianThuc.anomalies;
                return this.khoLuuTru.batThuong;
            }

            // Fallback sang file ri√™ng
            const { data } = await this.fetchVoiRetry('assets/data/anomalies.json');
            this.khoLuuTru.batThuong = data;
            return data;
            
        } catch (error) {
            console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu b·∫•t th∆∞·ªùng:', error.message);
            this.khoLuuTru.batThuong = [];
            return [];
        }
    }

    // ================================
    // X·ª¨ L√ù L·ªñI V√Ä FALLBACK
    // ================================

    hienThiLoi(message) {
        const errorContainer = document.getElementById('errorContainer') || this.taoErrorContainer();
        
        errorContainer.innerHTML = `
            <div class="error-message">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                <strong>C√≥ l·ªói x·∫£y ra:</strong> ${message}
                <br>
                <button class="retry-button mt-2" onclick="monitor.lamMoiDuLieuManh()">
                    <i class="bi bi-arrow-clockwise me-1"></i>
                    Th·ª≠ l·∫°i
                </button>
            </div>
        `;
        errorContainer.style.display = 'block';
    }

    taoErrorContainer() {
        const container = document.createElement('div');
        container.id = 'errorContainer';
        container.style.display = 'none';
        
        // Th√™m v√†o container ch√≠nh
        const mainContainer = document.querySelector('.container');
        if (mainContainer) {
            mainContainer.insertBefore(container, mainContainer.firstChild);
        }
        
        return container;
    }

    anThongBaoLoi() {
        const errorContainer = document.getElementById('errorContainer');
        if (errorContainer) {
            errorContainer.style.display = 'none';
        }
    }

    // ================================
    // PERFORMANCE V√Ä MEMORY MANAGEMENT
    // ================================

    // Debounce function calls
    debounce(func, delay, key) {
        if (this.debounceTimers.has(key)) {
            clearTimeout(this.debounceTimers.get(key));
        }
        
        const timer = setTimeout(() => {
            func();
            this.debounceTimers.delete(key);
        }, delay);
        
        this.debounceTimers.set(key, timer);
    }

    // Cleanup bi·ªÉu ƒë·ªì ƒë·ªÉ tr√°nh memory leak
    cleanupBieuDo(key) {
        if (this.cacBieuDo.has(key)) {
            const chart = this.cacBieuDo.get(key);
            if (chart && typeof chart.destroy === 'function') {
                chart.destroy();
            }
            this.cacBieuDo.delete(key);
        }
    }

    // Cleanup to√†n b·ªô bi·ªÉu ƒë·ªì
    cleanupTatCaBieuDo() {
        this.cacBieuDo.forEach((chart, key) => {
            if (chart && typeof chart.destroy === 'function') {
                chart.destroy();
            }
        });
        this.cacBieuDo.clear();
    }

    // ================================
    // C√ÅC METHODS G·ªêC (ƒê∆Ø·ª¢C C·∫¢I THI·ªÜN)
    // ================================

    ganCacSuKien() {
        // N√∫t l√†m m·ªõi v·ªõi debounce
        const refreshBtn = document.getElementById('refreshBtn');
        if (refreshBtn) {
            refreshBtn.addEventListener('click', () => {
                this.debounce(async () => {
                    await this.lamMoiDuLieuManh();
                }, 1000, 'refresh');
            });
        }

        // C√°c n√∫t b·ªô l·ªçc th·ªùi gian v·ªõi debounce
        document.querySelectorAll('.btn-time-filter').forEach(nut => {
            nut.addEventListener('click', (e) => {
                const khungThoiGian = e.target.dataset.timeframe;
                const giaiDoan = e.target.dataset.period;
                
                this.debounce(async () => {
                    if (khungThoiGian) {
                        this.khungThoiGianHienTai = khungThoiGian;
                        this.capNhatBoLocHoatDong(e.target);
                        await this.capNhatGiaoDienThoiGianThuc();
                    }
                    
                    if (giaiDoan) {
                        this.giaiDoanHienTai = giaiDoan;
                        this.capNhatBoLocHoatDong(e.target);
                        await this.capNhatGiaoDienLichSu();
                    }
                }, 300, `filter-${khungThoiGian || giaiDoan}`);
            });
        });

        // S·ª± ki·ªán chuy·ªÉn tab
        document.querySelectorAll('[data-bs-toggle="tab"]').forEach(tab => {
            tab.addEventListener('shown.bs.tab', async (e) => {
                const target = e.target.getAttribute('data-bs-target');
                
                this.debounce(async () => {
                    if (target === '#historical') {
                        await this.taiGiaoDienLichSu();
                    } else if (target === '#anomalies') {
                        await this.taiGiaoDienBatThuong();
                    } else if (target === '#realtime') {
                        await this.taiGiaoDienThoiGianThuc();
                        await this.taiDuLieu24hTheoGio();
                    }
                }, 200, `tab-${target}`);
            });
        });

        // Keyboard shortcuts
        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey || e.metaKey) {
                switch(e.key) {
                    case 'r':
                        e.preventDefault();
                        this.lamMoiDuLieuManh();
                        break;
                }
            }
        });
    }

    async lamMoiDuLieuManh() {
        try {
            this.anThongBaoLoi();
            console.log('üîÑ L√†m m·ªõi d·ªØ li·ªáu m·∫°nh...');
            
            // Reset tr·∫°ng th√°i
            this.soLanThayLoi = 0;
            this.khoLuuTru.trangThaiKetNoi = 'connecting';
            
            // Cleanup memory
            this.cleanupTatCaBieuDo();
            
            // Reset d·ªØ li·ªáu
            this.khoLuuTru = {
                thoiGianThuc: null,
                lichSu: new Map(),
                batThuong: null,
                capNhatLanCuoi: null,
                hourly24h: null,
                trangThaiKetNoi: 'connecting'
            };
            
            await this.taiDuLieuBanDau();
            
        } catch (error) {
            console.error('‚ùå L·ªói khi l√†m m·ªõi d·ªØ li·ªáu:', error);
            this.hienThiLoi(error.message);
        }
    }

    // ================================
    // T·ªêI ∆ØU AUTO REFRESH
    // ================================

    thietLapTuDongLamMoi() {
        // Clear existing intervals
        if (this.refreshIntervals) {
            this.refreshIntervals.forEach(interval => clearInterval(interval));
        }
        this.refreshIntervals = [];

        // L√†m m·ªõi d·ªØ li·ªáu nh·∫π m·ªói 5 ph√∫t
        const lightRefresh = setInterval(async () => {
            if (this.khoLuuTru.trangThaiKetNoi === 'connected') {
                try {
                    console.log('üîÑ L√†m m·ªõi d·ªØ li·ªáu nh·∫π...');
                    await this.taiDuLieuThoiGianThuc();
                    await this.taiDuLieu24hTheoGio();
                    await this.capNhatGiaoDienThoiGianThuc();
                    this.soLanThayLoi = 0;
                } catch (error) {
                    this.soLanThayLoi++;
                    console.error(`‚ùå L·ªói l√†m m·ªõi l·∫ßn ${this.soLanThayLoi}:`, error);
                    
                    if (this.soLanThayLoi >= 3) {
                        this.hienThiThongBaoLoi('M·∫•t k·∫øt n·ªëi li√™n t·ª•c. S·∫Ω th·ª≠ l·∫°i sau.', 'warning');
                    }
                }
            }
        }, 5 * 60 * 1000);

        // L√†m m·ªõi to√†n b·ªô m·ªói 30 ph√∫t
        const fullRefresh = setInterval(async () => {
            console.log('üîÑ L√†m m·ªõi to√†n b·ªô d·ªØ li·ªáu...');
            await this.lamMoiDuLieuManh();
        }, 30 * 60 * 1000);

        this.refreshIntervals = [lightRefresh, fullRefresh];
    }

    // ================================
    // PLACEHOLDER METHODS (C·∫¶N IMPLEMENT)
    // ================================

    async capNhatTatCaGiaoDien() {
        // Implementation needed
        console.log('C·∫≠p nh·∫≠t t·∫•t c·∫£ giao di·ªán...');
    }

    async capNhatGiaoDienThoiGianThuc() {
        // Implementation needed
        console.log('C·∫≠p nh·∫≠t giao di·ªán th·ªùi gian th·ª±c...');
    }

    async capNhatGiaoDienLichSu() {
        // Implementation needed
        console.log('C·∫≠p nh·∫≠t giao di·ªán l·ªãch s·ª≠...');
    }

    async capNhatGiaoDienBatThuong() {
        // Implementation needed
        console.log('C·∫≠p nh·∫≠t giao di·ªán b·∫•t th∆∞·ªùng...');
    }

    async taiGiaoDienThoiGianThuc() {
        await this.capNhatGiaoDienThoiGianThuc();
    }

    async taiGiaoDienLichSu() {
        await this.capNhatGiaoDienLichSu();
    }

    async taiGiaoDienBatThuong() {
        await this.capNhatGiaoDienBatThuong();
    }

    capNhatBoLocHoatDong(nutHoatDong) {
        nutHoatDong.parentNode.querySelectorAll('.btn-time-filter').forEach(nut => {
            nut.classList.remove('active');
        });
        nutHoatDong.classList.add('active');
    }

    capNhatTongQuan24h(data) {
        // Implementation needed
        console.log('C·∫≠p nh·∫≠t t·ªïng quan 24h:', data);
    }

    thietLapWebSocket() {
        // Future implementation
        console.log('WebSocket s·∫Ω ƒë∆∞·ª£c tri·ªÉn khai trong t∆∞∆°ng lai...');
    }

    // ================================
    // CLEANUP V√Ä DESTROY
    // ================================

    destroy() {
        // Cleanup intervals
        if (this.refreshIntervals) {
            this.refreshIntervals.forEach(interval => clearInterval(interval));
        }

        // Cleanup timers
        this.debounceTimers.forEach(timer => clearTimeout(timer));
        this.debounceTimers.clear();

        // Cleanup charts
        this.cleanupTatCaBieuDo();

        // Remove event listeners
        document.removeEventListener('keydown', this.handleKeydown);

        console.log('üßπ ƒê√£ cleanup h·ªá th·ªëng');
    }
}

// ================================
// KH·ªûI T·∫†O H·ªÜ TH·ªêNG
// ================================

document.addEventListener('DOMContentLoaded', () => {
    // Cleanup h·ªá th·ªëng c≈© n·∫øu c√≥
    if (window.monitor && typeof window.monitor.destroy === 'function') {
        window.monitor.destroy();
    }
    
    // Kh·ªüi t·∫°o h·ªá th·ªëng m·ªõi
    window.monitor = new HeThongTheoDoi_Binance_VietNam_V2();
    
    // Expose ƒë·ªÉ debug
    window.debugMonitor = {
        getState: () => window.monitor.khoLuuTru,
        getCharts: () => window.monitor.cacBieuDo,
        forceRefresh: () => window.monitor.lamMoiDuLieuManh(),
        cleanup: () => window.monitor.destroy()
    };
});

// Cleanup khi unload
window.addEventListener('beforeunload', () => {
    if (window.monitor && typeof window.monitor.destroy === 'function') {
        window.monitor.destroy();
    }
});

// Export cho module environments
if (typeof module !== 'undefined' && module.exports) {
    module.exports = HeThongTheoDoi_Binance_VietNam_V2;
}