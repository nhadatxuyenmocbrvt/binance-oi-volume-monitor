import os
import time
import argparse
import schedule
import subprocess
from datetime import datetime, timedelta
from config.settings import setup_logging, SYMBOLS, UPDATE_INTERVAL
from data_collector.historical_data import HistoricalDataCollector
from data_storage.database import Database
from data_analyzer.anomaly_detector import OptimizedAnomalyDetector
from alerting.telegram_bot import TelegramBot
from visualization.chart_generator import ChartGenerator
from visualization.report_generator import ReportGenerator
from utils.helpers import wait_for_next_minute

logger = setup_logging(__name__, 'main.log')

def collect_historical_data():
    """Thu th·∫≠p d·ªØ li·ªáu l·ªãch s·ª≠ - ch·∫°y 24h/l·∫ßn"""
    logger.info("üîÑ B·∫Øt ƒë·∫ßu thu th·∫≠p d·ªØ li·ªáu l·ªãch s·ª≠ (24h/l·∫ßn)")
    collector = HistoricalDataCollector()
    db = Database()
    
    try:
        # Thu th·∫≠p d·ªØ li·ªáu
        data = collector.collect_all_historical_data()
        
        # L∆∞u d·ªØ li·ªáu v√†o c∆° s·ªü d·ªØ li·ªáu
        if data and 'klines' in data and 'open_interest' in data:
            # L∆∞u d·ªØ li·ªáu klines
            for symbol in data['klines']:
                for timeframe in data['klines'][symbol]:
                    df = data['klines'][symbol][timeframe]
                    db.save_klines(symbol, timeframe, df)
            
            # L∆∞u d·ªØ li·ªáu Open Interest
            for symbol in data['open_interest']:
                df = data['open_interest'][symbol]
                db.save_open_interest(symbol, df)
        
        # Xu·∫•t d·ªØ li·ªáu JSON t·ªëi ∆∞u cho web
        db.export_to_json()
        
        logger.info("‚úÖ Ho√†n th√†nh thu th·∫≠p d·ªØ li·ªáu l·ªãch s·ª≠")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi thu th·∫≠p d·ªØ li·ªáu l·ªãch s·ª≠: {str(e)}")
        return False
    finally:
        db.close()

def update_hourly_data():
    """C·∫≠p nh·∫≠t d·ªØ li·ªáu m·ªói gi·ªù - TRACKING 24H"""
    logger.info("‚è∞ B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t d·ªØ li·ªáu h√†ng gi·ªù - Tracking 24h")
    
    try:
        collector = HistoricalDataCollector()
        db = Database()
        
        logger.info("üì° Thu th·∫≠p d·ªØ li·ªáu realtime cho tracking 24h...")
        realtime_data = collector.collect_realtime_data()
        
        # L∆∞u d·ªØ li·ªáu realtime v·ªõi timestamp gi·ªù tr√≤n
        current_hour = datetime.now().replace(minute=0, second=0, microsecond=0)
        
        if realtime_data and 'ticker' in realtime_data and 'open_interest' in realtime_data:
            saved_count = 0
            for symbol in SYMBOLS:
                if symbol in realtime_data['ticker']:
                    # C·∫≠p nh·∫≠t timestamp th√†nh gi·ªù tr√≤n
                    realtime_data['ticker'][symbol]['timestamp'] = current_hour
                    if db.save_ticker(symbol, realtime_data['ticker'][symbol]):
                        saved_count += 1
                
                if symbol in realtime_data['open_interest']:
                    # C·∫≠p nh·∫≠t timestamp th√†nh gi·ªù tr√≤n
                    realtime_data['open_interest'][symbol]['timestamp'] = current_hour
                    db.save_realtime_open_interest(symbol, realtime_data['open_interest'][symbol])
            
            logger.info(f"üíæ ƒê√£ l∆∞u d·ªØ li·ªáu h√†ng gi·ªù cho {saved_count}/{len(SYMBOLS)} symbols l√∫c {current_hour.strftime('%H:00')}")
        
        # L∆∞u d·ªØ li·ªáu tracking 24h
        success = db.save_hourly_tracking(current_hour)
        if success:
            logger.info(f"üìä ƒê√£ c·∫≠p nh·∫≠t tracking 24h cho {current_hour.strftime('%H:00')}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu h√†ng gi·ªù: {str(e)}")
        return False
    finally:
        if 'db' in locals():
            db.close()

def update_realtime_and_generate_reports():
    """C·∫≠p nh·∫≠t d·ªØ li·ªáu realtime, t·∫°o b√°o c√°o v√† ƒë·∫©y l√™n GitHub - ch·∫°y 30 ph√∫t/l·∫ßn"""
    logger.info("‚ö° B·∫Øt ƒë·∫ßu chu k·ª≥ realtime (30 ph√∫t/l·∫ßn): Update ‚Üí Reports ‚Üí Push")
    
    try:
        # B∆∞·ªõc 1: C·∫≠p nh·∫≠t d·ªØ li·ªáu realtime
        collector = HistoricalDataCollector()
        db = Database()
        
        logger.info("üì° Thu th·∫≠p d·ªØ li·ªáu realtime...")
        realtime_data = collector.collect_realtime_data()
        
        # L∆∞u d·ªØ li·ªáu realtime v√†o database
        if realtime_data and 'ticker' in realtime_data and 'open_interest' in realtime_data:
            saved_count = 0
            for symbol in SYMBOLS:
                if symbol in realtime_data['ticker']:
                    if db.save_ticker(symbol, realtime_data['ticker'][symbol]):
                        saved_count += 1
                
                if symbol in realtime_data['open_interest']:
                    db.save_realtime_open_interest(symbol, realtime_data['open_interest'][symbol])
            
            logger.info(f"üíæ ƒê√£ l∆∞u d·ªØ li·ªáu realtime cho {saved_count}/{len(SYMBOLS)} symbols")
        
        # B∆∞·ªõc 2: T·∫°o b√°o c√°o t·ªëi ∆∞u
        logger.info("üìä T·∫°o b√°o c√°o t·ªëi ∆∞u OI & Volume...")
        try:
            report_gen = ReportGenerator(db)
            
            # T·∫°o b√°o c√°o t·ªïng h·ª£p
            summary = report_gen.generate_daily_summary()
            if summary:
                logger.info("‚úÖ ƒê√£ t·∫°o b√°o c√°o t·ªïng h·ª£p")
            
            # T·∫°o d·ªØ li·ªáu tracking 24h cho web
            hourly_data = report_gen.generate_24h_data()
            if hourly_data:
                logger.info("üìà ƒê√£ t·∫°o d·ªØ li·ªáu tracking 24h")
        
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è L·ªói khi t·∫°o b√°o c√°o: {str(e)} (ti·∫øp t·ª•c x·ª≠ l√Ω)")
        
        # B∆∞·ªõc 3: Xu·∫•t d·ªØ li·ªáu JSON t·ªëi ∆∞u cho web
        logger.info("üìÅ Xu·∫•t d·ªØ li·ªáu JSON t·ªëi ∆∞u...")
        export_success = db.export_to_json()
        if export_success:
            logger.info("‚úÖ ƒê√£ xu·∫•t d·ªØ li·ªáu JSON cho web")
        
        # B∆∞·ªõc 4: Push l√™n GitHub
        logger.info("üì§ ƒê·∫©y d·ªØ li·ªáu l√™n GitHub...")
        push_success = push_to_github()
        
        if push_success:
            logger.info("üéâ Ho√†n th√†nh chu k·ª≥ realtime: c·∫≠p nh·∫≠t ‚Üí b√°o c√°o ‚Üí push GitHub")
        else:
            logger.info("‚ÑπÔ∏è Ho√†n th√†nh chu k·ª≥ realtime: kh√¥ng c√≥ thay ƒë·ªïi ƒë·ªÉ push")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói trong chu k·ª≥ realtime: {str(e)}")
        return False
    finally:
        if 'db' in locals():
            db.close()

def detect_anomalies():
    """Ph√°t hi·ªán b·∫•t th∆∞·ªùng t·ªëi ∆∞u OI & Volume - ch·∫°y 15 ph√∫t/l·∫ßn"""
    logger.info("üîç B·∫Øt ƒë·∫ßu ph√°t hi·ªán b·∫•t th∆∞·ªùng t·ªëi ∆∞u (15 ph√∫t/l·∫ßn)")
    db = Database()
    
    try:
        detector = OptimizedAnomalyDetector(db)
        
        total_anomalies = 0
        anomaly_summary = {}
        
        # Ph√°t hi·ªán b·∫•t th∆∞·ªùng cho t·ª´ng symbol
        for symbol in SYMBOLS:
            try:
                logger.info(f"üîç Ph√¢n t√≠ch {symbol}...")
                anomalies = detector.detect_all_anomalies(symbol)
                total_anomalies += len(anomalies)
                
                if anomalies:
                    anomaly_summary[symbol] = len(anomalies)
                    # Log chi ti·∫øt
                    for anomaly in anomalies[-3:]:  # Log 3 anomalies g·∫ßn nh·∫•t
                        logger.info(f"   üö® {anomaly['data_type']}: {anomaly['severity']} (Z: {anomaly['z_score']:.2f})")
                else:
                    logger.info(f"   ‚úÖ {symbol}: Kh√¥ng ph√°t hi·ªán anomaly")
                    
            except Exception as e:
                logger.error(f"‚ùå L·ªói khi ph√°t hi·ªán anomalies cho {symbol}: {str(e)}")
        
        # G·ª≠i c·∫£nh b√°o qua Telegram
        try:
            if total_anomalies > 0:
                bot = TelegramBot()
                bot.send_anomalies(db)
                logger.info("üì± ƒê√£ g·ª≠i c·∫£nh b√°o qua Telegram")
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi g·ª≠i c·∫£nh b√°o Telegram: {str(e)}")
        
        # Log summary
        if anomaly_summary:
            logger.info(f"‚úÖ Ho√†n th√†nh ph√°t hi·ªán b·∫•t th∆∞·ªùng: {total_anomalies} anomalies")
            for symbol, count in anomaly_summary.items():
                logger.info(f"   - {symbol}: {count} anomalies")
        else:
            logger.info("‚úÖ Ho√†n th√†nh ph√°t hi·ªán b·∫•t th∆∞·ªùng: Kh√¥ng c√≥ anomaly n√†o")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi ph√°t hi·ªán b·∫•t th∆∞·ªùng: {str(e)}")
        return False
    finally:
        db.close()

def generate_optimized_reports():
    """T·∫°o b√°o c√°o t·ªëi ∆∞u cho OI & Volume (kh√¥ng push)"""
    logger.info("üìä B·∫Øt ƒë·∫ßu t·∫°o b√°o c√°o t·ªëi ∆∞u OI & Volume")
    db = Database()
    
    try:
        report_gen = ReportGenerator(db)
        
        # T·∫°o b√°o c√°o t·ªïng h·ª£p
        summary = report_gen.generate_daily_summary()
        if summary:
            logger.info("‚úÖ T·∫°o b√°o c√°o t·ªïng h·ª£p th√†nh c√¥ng")
        
        # T·∫°o d·ªØ li·ªáu tracking 24h
        hourly_data = report_gen.generate_24h_data()
        if hourly_data:
            logger.info("‚úÖ T·∫°o d·ªØ li·ªáu tracking 24h th√†nh c√¥ng")
        
        # Xu·∫•t JSON t·ªëi ∆∞u
        export_success = db.export_to_json()
        if export_success:
            logger.info("‚úÖ Xu·∫•t d·ªØ li·ªáu JSON th√†nh c√¥ng")
        
        logger.info("‚úÖ Ho√†n th√†nh t·∫°o b√°o c√°o t·ªëi ∆∞u")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi t·∫°o b√°o c√°o t·ªëi ∆∞u: {str(e)}")
        return False
    finally:
        db.close()

def push_to_github():
    """ƒê·∫©y d·ªØ li·ªáu l√™n GitHub"""
    try:
        logger.info("üì§ B·∫Øt ƒë·∫ßu ƒë·∫©y d·ªØ li·ªáu l√™n GitHub")
        
        # Th√™m thay ƒë·ªïi
        add_data_cmd = ["git", "add", "data/"]
        add_docs_cmd = ["git", "add", "docs/"]
        
        # Th·ª±c thi l·ªánh git add
        subprocess.run(add_data_cmd, check=True)
        subprocess.run(add_docs_cmd, check=True)
        
        # Ki·ªÉm tra xem c√≥ thay ƒë·ªïi ƒë·ªÉ commit kh√¥ng
        status_cmd = ["git", "diff", "--staged", "--quiet"]
        status_result = subprocess.run(status_cmd)
        
        # N·∫øu c√≥ thay ƒë·ªïi (exit code kh√°c 0)
        if status_result.returncode != 0:
            # T·∫°o commit message v·ªõi timestamp
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            commit_cmd = ["git", "commit", "-m", f"üîÑ Auto update OI & Volume data: {timestamp}"]
            
            # Th·ª±c thi l·ªánh git commit
            subprocess.run(commit_cmd, check=True)
            
            # ƒê·∫©y l√™n GitHub
            push_cmd = ["git", "push"]
            subprocess.run(push_cmd, check=True)
            
            logger.info(f"‚úÖ ƒê√£ ƒë·∫©y d·ªØ li·ªáu l√™n GitHub th√†nh c√¥ng l√∫c {timestamp}")
            return True
        else:
            logger.info("‚ÑπÔ∏è Kh√¥ng c√≥ thay ƒë·ªïi ƒë·ªÉ commit")
            return False
    
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå L·ªói khi ƒë·∫©y d·ªØ li·ªáu l√™n GitHub: {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi ƒë·∫©y d·ªØ li·ªáu l√™n GitHub: {str(e)}")
        return False

def send_daily_report():
    """G·ª≠i b√°o c√°o h√†ng ng√†y qua Telegram - ch·∫°y 1 l·∫ßn/ng√†y l√∫c 20:00"""
    logger.info("üì± B·∫Øt ƒë·∫ßu g·ª≠i b√°o c√°o h√†ng ng√†y qua Telegram")
    db = Database()
    
    try:
        bot = TelegramBot()
        report_gen = ReportGenerator(db)
        
        # T·∫°o b√°o c√°o t·ªïng h·ª£p
        summary = report_gen.generate_daily_summary()
        
        # G·ª≠i b√°o c√°o t·ªëi ∆∞u cho t·ª´ng symbol
        for symbol in SYMBOLS:
            try:
                # L·∫•y d·ªØ li·ªáu OI v√† Volume
                oi_df = db.get_open_interest(symbol, limit=24)  # 24 ƒëi·ªÉm g·∫ßn nh·∫•t
                tracking_df = db.get_24h_tracking_data(symbol)
                
                # T√≠nh c√°c thay ƒë·ªïi t·ª´ tracking data
                oi_change = 0
                volume_change = 0
                
                if not tracking_df.empty and len(tracking_df) > 1:
                    latest = tracking_df.iloc[-1]
                    previous = tracking_df.iloc[-2]
                    
                    if previous['open_interest'] > 0:
                        oi_change = ((latest['open_interest'] - previous['open_interest']) / previous['open_interest']) * 100
                    
                    if previous['volume'] > 0:
                        volume_change = ((latest['volume'] - previous['volume']) / previous['volume']) * 100
                
                # L·∫•y sentiment t·ª´ summary
                sentiment = None
                if summary and 'symbols' in summary and symbol in summary['symbols']:
                    sentiment = {
                        'sentiment_label': summary['symbols'][symbol].get('sentiment', 'neutral'),
                        'price_change': summary['symbols'][symbol].get('price_change', 0)
                    }
                
                # L·∫•y ƒë∆∞·ªùng d·∫´n chart (n·∫øu c√≥)
                chart_path = f'data/charts/{symbol}_1d_price_oi.png'
                if not os.path.exists(chart_path):
                    chart_path = None
                
                # G·ª≠i b√°o c√°o v·ªõi format m·ªõi
                message = f"üìä **{symbol} Daily Report**\n"
                message += f"üî∏ OI Change: {oi_change:+.2f}%\n"
                message += f"üîπ Volume Change: {volume_change:+.2f}%\n"
                
                if sentiment:
                    message += f"üìà Sentiment: {sentiment['sentiment_label']}\n"
                    message += f"üí∞ Price Change: {sentiment['price_change']:+.2f}%\n"
                
                bot.send_message(message)
                
                # ƒê·ª£i 1 gi√¢y ƒë·ªÉ tr√°nh spam
                time.sleep(1)
                
            except Exception as e:
                logger.error(f"‚ùå L·ªói khi g·ª≠i b√°o c√°o cho {symbol}: {str(e)}")
                continue
        
        logger.info("‚úÖ Ho√†n th√†nh g·ª≠i b√°o c√°o h√†ng ng√†y")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi g·ª≠i b√°o c√°o h√†ng ng√†y: {str(e)}")
        return False
    finally:
        db.close()

def schedule_optimized_tasks():
    """L·∫≠p l·ªãch c√°c t√°c v·ª• t·ªëi ∆∞u cho tracking OI & Volume"""
    logger.info("‚è∞ Thi·∫øt l·∫≠p l·ªãch tr√¨nh t·ªëi ∆∞u OI & Volume Tracking")
    
    # üìä THU TH·∫¨P D·ªÆ LI·ªÜU L·ªäCH S·ª¨: 24H/L·∫¶N (m·ªói ng√†y l√∫c 00:05)
    schedule.every().day.at("00:05").do(collect_historical_data)
    logger.info("‚úÖ L·ªãch thu th·∫≠p d·ªØ li·ªáu l·ªãch s·ª≠: m·ªói ng√†y l√∫c 00:05")
    
    # ‚è∞ C·∫¨P NH·∫¨T TRACKING 24H: M·ªñI GI·ªú ƒê√öNG (0 ph√∫t)
    schedule.every().hour.at(":00").do(update_hourly_data)
    logger.info("‚úÖ L·ªãch tracking 24h: m·ªói gi·ªù ƒë√∫ng gi·ªù")
    
    # ‚ö° C·∫¨P NH·∫¨T REALTIME + T·∫†O B√ÅO C√ÅO + PUSH: 30 PH√öT/L·∫¶N
    schedule.every(30).minutes.do(update_realtime_and_generate_reports)
    logger.info("‚úÖ L·ªãch realtime + b√°o c√°o + push: m·ªói 30 ph√∫t")
    
    # üîç PH√ÅT HI·ªÜN B·∫§T TH∆Ø·ªúNG T·ªêI ∆ØU: 15 PH√öT/L·∫¶N
    schedule.every(15).minutes.do(detect_anomalies)
    logger.info("‚úÖ L·ªãch ph√°t hi·ªán b·∫•t th∆∞·ªùng t·ªëi ∆∞u: m·ªói 15 ph√∫t")
    
    # üì± G·ª¨I B√ÅO C√ÅO TELEGRAM: M·ªñI NG√ÄY L√öC 20:00
    schedule.every().day.at("20:00").do(send_daily_report)
    logger.info("‚úÖ L·ªãch g·ª≠i b√°o c√°o Telegram: m·ªói ng√†y l√∫c 20:00")
    
    logger.info("üéØ ƒê√£ thi·∫øt l·∫≠p l·ªãch tr√¨nh t·ªëi ∆∞u:")
    logger.info("   üìä D·ªØ li·ªáu l·ªãch s·ª≠: 24h/l·∫ßn")
    logger.info("   ‚è∞ Tracking 24h: m·ªói gi·ªù ƒë√∫ng")
    logger.info("   ‚ö° Realtime + Reports: 30 ph√∫t/l·∫ßn") 
    logger.info("   üîç Anomaly detection: 15 ph√∫t/l·∫ßn")
    logger.info("   üì± Daily Telegram: 1 l·∫ßn/ng√†y")

def run_scheduled_tasks():
    """Ch·∫°y c√°c t√°c v·ª• ƒë√£ l√™n l·ªãch"""
    logger.info("üöÄ B·∫Øt ƒë·∫ßu ch·∫°y c√°c t√°c v·ª• theo l·ªãch tr√¨nh OI & Volume Tracking")
    
    while True:
        try:
            schedule.run_pending()
            time.sleep(1)
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è D·ª´ng h·ªá th·ªëng theo y√™u c·∫ßu ng∆∞·ªùi d√πng")
            break
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi ch·∫°y t√°c v·ª• theo l·ªãch: {str(e)}")
            time.sleep(10)  # ƒê·ª£i 10 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i

def initialize_system():
    """Kh·ªüi t·∫°o h·ªá th·ªëng t·ªëi ∆∞u"""
    logger.info("üîß B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o h·ªá th·ªëng OI & Volume Monitor")
    
    # ƒê·∫£m b·∫£o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt t·ªìn t·∫°i
    directories = [
        'data',
        'data/charts', 
        'data/reports',
        'data/json',
        'logs',
        'docs/assets/data'
    ]
    
    for directory in directories:
        os.makedirs(directory, exist_ok=True)
        logger.info(f"üìÅ ƒê√£ t·∫°o/ki·ªÉm tra th∆∞ m·ª•c: {directory}")
    
    # Kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu
    try:
        db = Database()
        db.close()
        logger.info("üíæ ƒê√£ kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu th√†nh c√¥ng")
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu: {str(e)}")
        raise
    
    logger.info("‚úÖ Ho√†n th√†nh kh·ªüi t·∫°o h·ªá th·ªëng")

def main():
    """H√†m ch√≠nh c·ªßa ·ª©ng d·ª•ng - T∆Ø∆†NG TH√çCH V·ªöI GIAO DI·ªÜN M·ªöI"""
    parser = argparse.ArgumentParser(
        description='H·ªá th·ªëng theo d√µi OI & Volume t·ªëi ∆∞u t·ª´ Binance',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
V√≠ d·ª• s·ª≠ d·ª•ng:
  python main.py --schedule          # Ch·∫°y theo l·ªãch tr√¨nh t·ªëi ∆∞u (khuy·∫øn ngh·ªã)
  python main.py --collect           # Thu th·∫≠p d·ªØ li·ªáu l·ªãch s·ª≠
  python main.py --realtime          # C·∫≠p nh·∫≠t realtime + b√°o c√°o + push
  python main.py --hourly            # C·∫≠p nh·∫≠t tracking 24h
  python main.py --detect            # Ph√°t hi·ªán b·∫•t th∆∞·ªùng t·ªëi ∆∞u
        """
    )
    
    parser.add_argument('--collect', action='store_true', 
                       help='Thu th·∫≠p d·ªØ li·ªáu l·ªãch s·ª≠ (24h/l·∫ßn)')
    parser.add_argument('--realtime', action='store_true', 
                       help='C·∫≠p nh·∫≠t realtime + t·∫°o b√°o c√°o + push GitHub (30 ph√∫t/l·∫ßn)')
    parser.add_argument('--hourly', action='store_true', 
                       help='C·∫≠p nh·∫≠t tracking 24h (1h/l·∫ßn)')
    parser.add_argument('--detect', action='store_true', 
                       help='Ph√°t hi·ªán b·∫•t th∆∞·ªùng t·ªëi ∆∞u (15 ph√∫t/l·∫ßn)')
    parser.add_argument('--report', action='store_true', 
                       help='Ch·ªâ t·∫°o b√°o c√°o t·ªëi ∆∞u (kh√¥ng push GitHub)')
    parser.add_argument('--push', action='store_true', 
                       help='Ch·ªâ ƒë·∫©y d·ªØ li·ªáu l√™n GitHub')
    parser.add_argument('--daily', action='store_true', 
                       help='G·ª≠i b√°o c√°o h√†ng ng√†y qua Telegram')
    parser.add_argument('--schedule', action='store_true', 
                       help='Ch·∫°y t·∫•t c·∫£ t√°c v·ª• theo l·ªãch tr√¨nh t·ªëi ∆∞u (khuy·∫øn ngh·ªã)')
    
    args = parser.parse_args()
    
    # Hi·ªÉn th·ªã th√¥ng tin kh·ªüi ƒë·ªông
    logger.info("="*60)
    logger.info("üöÄ BINANCE OI & VOLUME MONITOR - OPTIMIZED VERSION")
    logger.info("="*60)
    logger.info(f"‚è∞ Kh·ªüi ƒë·ªông l√∫c: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info(f"üìä Theo d√µi {len(SYMBOLS)} symbols: {', '.join(SYMBOLS)}")
    logger.info(f"üéØ Focus: OI & Volume tracking (24h + 30d)")
    
    # Kh·ªüi t·∫°o h·ªá th·ªëng
    try:
        initialize_system()
    except Exception as e:
        logger.error(f"‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o h·ªá th·ªëng: {str(e)}")
        return 1
    
    # Th·ª±c hi·ªán c√°c t√°c v·ª• d·ª±a tr√™n tham s·ªë
    try:
        if args.collect:
            logger.info("üîÑ CH·∫æ ƒê·ªò: Thu th·∫≠p d·ªØ li·ªáu l·ªãch s·ª≠")
            success = collect_historical_data()
            return 0 if success else 1
            
        elif args.realtime:
            logger.info("‚ö° CH·∫æ ƒê·ªò: C·∫≠p nh·∫≠t realtime + b√°o c√°o + push")
            success = update_realtime_and_generate_reports()
            return 0 if success else 1
            
        elif args.hourly:
            logger.info("‚è∞ CH·∫æ ƒê·ªò: C·∫≠p nh·∫≠t tracking 24h")
            success = update_hourly_data()
            return 0 if success else 1
            
        elif args.detect:
            logger.info("üîç CH·∫æ ƒê·ªò: Ph√°t hi·ªán b·∫•t th∆∞·ªùng t·ªëi ∆∞u")
            success = detect_anomalies()
            return 0 if success else 1
            
        elif args.report:
            logger.info("üìä CH·∫æ ƒê·ªò: Ch·ªâ t·∫°o b√°o c√°o t·ªëi ∆∞u")
            success = generate_optimized_reports()
            return 0 if success else 1
            
        elif args.push:
            logger.info("üì§ CH·∫æ ƒê·ªò: Ch·ªâ push l√™n GitHub")
            success = push_to_github()
            return 0 if success else 1
            
        elif args.daily:
            logger.info("üì± CH·∫æ ƒê·ªò: G·ª≠i b√°o c√°o Telegram")
            success = send_daily_report()
            return 0 if success else 1
            
        elif args.schedule:
            logger.info("‚è∞ CH·∫æ ƒê·ªò: Ch·∫°y theo l·ªãch tr√¨nh t·ªëi ∆∞u")
            schedule_optimized_tasks()
            run_scheduled_tasks()
            return 0
            
        else:
            # Ch·∫ø ƒë·ªô m·∫∑c ƒë·ªãnh: setup ƒë·∫ßy ƒë·ªß t·ªëi ∆∞u
            logger.info("üéØ CH·∫æ ƒê·ªò M·∫∂C ƒê·ªäNH: Setup OI & Volume tracking t·ªëi ∆∞u")
            logger.info("üìã Quy tr√¨nh: Thu th·∫≠p l·ªãch s·ª≠ ‚Üí Realtime + B√°o c√°o + Push ‚Üí Tracking t·ªëi ∆∞u")
            
            # B∆∞·ªõc 1: Thu th·∫≠p d·ªØ li·ªáu l·ªãch s·ª≠
            logger.info("üîÑ B∆∞·ªõc 1/3: Thu th·∫≠p d·ªØ li·ªáu l·ªãch s·ª≠...")
            if not collect_historical_data():
                logger.error("‚ùå Kh√¥ng th·ªÉ thu th·∫≠p d·ªØ li·ªáu l·ªãch s·ª≠")
                return 1
            
            # B∆∞·ªõc 2: C·∫≠p nh·∫≠t realtime + t·∫°o b√°o c√°o + push
            logger.info("‚ö° B∆∞·ªõc 2/3: C·∫≠p nh·∫≠t realtime + t·∫°o b√°o c√°o + push...")
            if not update_realtime_and_generate_reports():
                logger.warning("‚ö†Ô∏è C√≥ l·ªói khi c·∫≠p nh·∫≠t realtime, nh∆∞ng ti·∫øp t·ª•c...")
            
            # B∆∞·ªõc 3: Ch·∫°y theo l·ªãch tr√¨nh t·ªëi ∆∞u
            logger.info("‚è∞ B∆∞·ªõc 3/3: Thi·∫øt l·∫≠p tracking t·ªëi ∆∞u...")
            schedule_optimized_tasks()
            
            logger.info("‚úÖ Ho√†n th√†nh setup - OI & Volume tracking t·ªëi ∆∞u ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t!")
            logger.info("üîÑ H·ªá th·ªëng s·∫Ω theo d√µi OI & Volume t·ª´ng gi·ªù v√† c·∫≠p nh·∫≠t web...")
            
            run_scheduled_tasks()
            return 0
            
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è D·ª´ng h·ªá th·ªëng theo y√™u c·∫ßu ng∆∞·ªùi d√πng")
        return 0
    except Exception as e:
        logger.error(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}")
        return 1

if __name__ == "__main__":
    exit_code = main()
    logger.info(f"üèÅ K·∫øt th√∫c v·ªõi m√£: {exit_code}")
    exit(exit_code)